name: Voxify CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend linting
        working-directory: backend
        run: |
          echo "Running Black formatting check..."
          black --check .
          echo "✅ Black formatting check completed"
          echo "Running Flake8 linting..."
          flake8 .
          echo "✅ Flake8 linting completed"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Run frontend linting
        run: |
          cd frontend
          npm install
          echo "Running ESLint..."
          npm run lint
          echo "✅ ESLint completed"
          echo "Running Prettier formatting check..."
          npm run format:check
          echo "✅ Prettier formatting check completed"

      - name: Run Snyk security scan
        if: ${{ env.SNYK_TOKEN != '' }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          cd backend
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk code test --severity-threshold=high || true  # Allow to fail

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          sudo apt-get autoremove -y
          docker system prune -af
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: voxify-backend:latest
          build-args: |
            INSTALL_DEV=true

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: voxify-frontend:latest

      - name: Initialize database
        run: |
          docker run --rm \
            -v voxify_data:/data \
            -e DATABASE_URL=sqlite:////data/voxify.db \
            -e VECTOR_DB_PATH=data/chroma_db \
            -e PYTHONPATH=/app \
            voxify-backend:latest python scripts/init_db.py

      - name: Start service
        run: |
          docker run -d \
          --name voxify_api \
          -p 8000:8000 \
          -v voxify_data:/data \
          -e FLASK_ENV=development \
          -e DATABASE_URL=sqlite:////data/voxify.db \
          -e VECTOR_DB_PATH=data/chroma_db \
          voxify-backend:latest

      - name: Wait for API
        run: |
          timeout 60 bash -c '
            until curl -f http://localhost:8000/health; do
              echo "Waiting for API... (attempt $((++i)))"
              sleep 2
            done
          ' || (echo "API failed to start" && docker logs voxify_api && exit 1)

      - name: Run tests
        run: |
          docker run --rm \
            --network container:voxify_api \
            -v voxify_data:/data \
            -e DATABASE_URL=sqlite:////data/voxify.db \
            -e VECTOR_DB_PATH=data/chroma_db \
            -e DOCKER_ENV=true \
            -e FLASK_HOST=localhost \
            voxify-backend:latest python -m pytest tests/ -v

      - name: Cleanup
        if: always()
        run: |
          docker stop voxify_api || true
          docker rm voxify_api || true
          docker volume rm voxify_data || true
