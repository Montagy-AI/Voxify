"""
File Management API Routes with Full Swagger Documentation
RESTful endpoints that connect to existing functionality with comprehensive OpenAPI documentation
"""

from flask import send_file
from flask_restx import Namespace, Resource, fields
from flask_jwt_extended import jwt_required, get_jwt_identity

# Create namespace
file_ns = Namespace('File Management', description='File download and management for synthesis results', path='/file')

# Define data models
file_info_model = file_ns.model('FileInfo', {
    'job_id': fields.String(required=True, description='Associated job ID'),
    'text_content': fields.String(description='Original text content'),
    'language': fields.String(description='Text language'),
    'status': fields.String(description='Job status'),
    'output_path': fields.String(description='File path'),
    'duration': fields.Float(description='Audio duration in seconds'),
    'file_size': fields.Integer(description='File size in bytes'),
    'file_exists': fields.Boolean(description='Whether the file exists on server'),
    'created_at': fields.String(description='Creation timestamp'),
    'completed_at': fields.String(description='Completion timestamp')
})

error_model = file_ns.model('Error', {
    'success': fields.Boolean(required=True, description='Always false for errors', example=False),
    'error': fields.String(required=True, description='Error message')
})

success_response = file_ns.model('SuccessResponse', {
    'success': fields.Boolean(required=True, description='Always true for successful responses', example=True),
    'timestamp': fields.String(required=True, description='ISO timestamp of the response'),
    'message': fields.String(description='Optional success message'),
    'data': fields.Raw(description='Response data')
})

@file_ns.route('/synthesis/<string:job_id>')
class SynthesisFileResource(Resource):
    @file_ns.doc('download_synthesis_file', security='Bearer')
    @file_ns.produces(['audio/wav', 'audio/mp3', 'audio/flac', 'audio/ogg'])
    @file_ns.response(200, 'Audio file download')
    @file_ns.response(404, 'File not found', error_model)
    @file_ns.response(403, 'Access denied', error_model)
    @file_ns.response(401, 'Authentication required', error_model)
    @file_ns.response(500, 'Download failed', error_model)
    @jwt_required()
    def get(self, job_id):
        """Download synthesized audio file
        
        Downloads the generated audio file for the specified synthesis job.
        The file is served with appropriate audio MIME type and filename.
        Access is restricted to the job owner.
        """
        from .routes import download_synthesis_file
        return download_synthesis_file(job_id)

    @file_ns.doc('delete_synthesis_file', security='Bearer')
    @file_ns.marshal_with(success_response, code=200, description='File deleted successfully')
    @file_ns.response(404, 'File not found', error_model)
    @file_ns.response(403, 'Access denied', error_model)
    @file_ns.response(401, 'Authentication required', error_model)
    @file_ns.response(500, 'Deletion failed', error_model)
    @jwt_required()
    def delete(self, job_id):
        """Delete synthesized audio file
        
        Removes the audio file from storage and updates the database records.
        This action cannot be undone. Access is restricted to the job owner.
        """
        from .routes import delete_synthesis_file
        return delete_synthesis_file(job_id)

@file_ns.route('/voice-clone/<string:job_id>')
class VoiceCloneSynthesisFileResource(Resource):
    @file_ns.doc('download_voice_clone_synthesis', security='Bearer')
    @file_ns.produces(['audio/wav'])
    @file_ns.response(200, 'Audio file download/stream')
    @file_ns.response(404, 'File not found', error_model)
    @file_ns.response(403, 'Access denied', error_model)
    @file_ns.response(401, 'Authentication required', error_model)
    @file_ns.response(500, 'Download failed', error_model)
    @jwt_required()
    def get(self, job_id):
        """Download voice clone synthesized audio file
        
        Downloads or streams the audio file generated by voice clone synthesis.
        The file is served for audio playback rather than download attachment.
        Handles both relative and absolute file paths automatically.
        """
        from .routes import download_voice_clone_synthesis
        return download_voice_clone_synthesis(job_id)

@file_ns.route('/voice-clone/<string:job_id>/info')
class VoiceCloneSynthesisInfoResource(Resource):
    @file_ns.doc('get_voice_clone_synthesis_info', security='Bearer')
    @file_ns.marshal_with(success_response, code=200, description='File information retrieved')
    @file_ns.response(404, 'Job not found', error_model)
    @file_ns.response(403, 'Access denied', error_model)
    @file_ns.response(401, 'Authentication required', error_model)
    @file_ns.response(500, 'Failed to get file info', error_model)
    @jwt_required()
    def get(self, job_id):
        """Get voice clone synthesis file information
        
        Returns metadata about the synthesis job and its output file,
        including file size, duration, and existence status.
        Useful for checking file availability before download.
        """
        from .routes import get_voice_clone_synthesis_info
        return get_voice_clone_synthesis_info(job_id)